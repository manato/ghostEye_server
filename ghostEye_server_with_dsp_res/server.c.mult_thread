#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <string.h>
#include <time.h>
#include <signal.h>
#include <errno.h>
#include <assert.h>

#include <unistd.h>

#include "data_for_shm.h"
#include "switch_release.h"

#include <highgui.h>

#if 0
/* Cordinates */
struct coordinates{
    int left;
    int top;
    int right;
    int bottom;
    int type;
    int reserved;
};
#endif

void getConnect(int port, int sock_num);
int getInfo();
int getScokInfo();
int getPicture(int sock_num);
int photo(char *buf,int sum);
void sendPicture();
//int sendCoordinates(struct coordinates *points,int num,int resolution);
int sendCoordinates(obj_coordinate *points, int resolution);




//info of socket 
int sock0, sock1, sock2, sock3, sock4, sock5;

void disconnect(void)
{
    close(sock0);
    close(sock1);
}




/*
 * whether or not server send image data to android
 * flag 0:not send, 1:send
 */ 
int flag;
int dataInfo[3];
char file_name[126];

/* for shared memory */
unsigned char *shrd_ptr_input, *shrd_ptr_output;
int *shrd_ptr_height, *shrd_ptr_width, *shrd_ptr_size;
int *shrd_ptr_rbuf_head, *shrd_ptr_rbuf_tail;
obj_coordinate *shrd_ptr_rbuf;

/* for semaphore */
int semid;

/* for reader-writer lock */
pthread_rwlock_t *shrd_ptr_rwlock;

/* for image update checker */
char *shrd_ptr_imgupd;

/* for displaying image */
static IplImage* display_image;


int main(){
    int count=0;
    struct timeval start, end;
    struct timeval start_timeval, end_timeval;                                                                 
    double sec_timeofday, cycle_time;

#if 0
    /* test */
    // left, top, right, bottom
    struct coordinates points[4] = {{0, 340, 200, 230},
                                    {310, 430, 450, 120},
                                    {460, 380, 470, 320},
                                    {560, 480, 640, 280}};
#endif
    int num;	

//    int break_flag = 0;

    /*************************************************************************/
    /*************************************************************************/
    // prepare for using shared memory and semaphoer
    /*************************************************************************/
    
    
    /* for shared memory */
    key_t shm_key_input, shm_key_output, shm_key_height, shm_key_width, shm_key_size;
    key_t shm_key_rbuf, shm_key_rbuf_head, shm_key_rbuf_tail;
    int shrd_id_input, shrd_id_output, shrd_id_height, shrd_id_width, shrd_id_size;
    int shrd_id_rbuf, shrd_id_rbuf_head, shrd_id_rbuf_tail;

    /* for semaphore control */
    key_t sem_key;

    /* for reader-writer lock */
    key_t shm_key_rwlock;
    int shrd_id_rwlock;

    /* for image update checker */
    key_t shm_key_imgupd;
    int shrd_id_imgupd;


    /****************************************************************/
    /* key generation */
    /****************************************************************/
    shm_key_input = ftok(INPUT_SHM_PATH, 1);  // key for input file
    if(shm_key_input == -1) {  // error semantics
        printf("generate key for input failed\n");
        return -1;
    }

    shm_key_output = ftok(OUTPUT_SHM_PATH, 1);  // key for output file
    if(shm_key_output == -1) {   // error semantics
        printf("generate key for output failed\n");
        return -1;
    }

    shm_key_height = ftok(HEIGHT_SHM_PATH, 1);  // key for height file
    if(shm_key_height == -1) {   // error semantics
        printf("generate key for height failed\n");
        return -1;
    }

    shm_key_width = ftok(WIDTH_SHM_PATH, 1);  // key for width file
    if(shm_key_width == -1) {   // error semantics
        printf("generate key for width failed\n");
        return -1;
    }

    shm_key_size = ftok(SIZE_SHM_PATH, 1);  // key for size file
    if(shm_key_size == -1) {   // error semantics
        printf("generate key for size failed\n");
        return -1;
    }

    shm_key_rbuf = ftok(RBUF_PATH, 1);  // key for ring buffer
    if(shm_key_rbuf == -1) {  // error semantics
        printf("generate key for rbuf failed\n");
        return -1;
    }          

    shm_key_rbuf_head = ftok(RBUF_HEAD_PATH, 1);  // key for ring buffer head
    if(shm_key_rbuf_head == -1) {  // error semantics
        printf("generate key for rbuf_head failed\n");
        return -1;
    }          

    shm_key_rbuf_tail = ftok(RBUF_TAIL_PATH, 1);  // key for ring buffer tail
    if(shm_key_rbuf_tail == -1) {  // error semantics
        printf("generate key for rbuf_tail failed\n");
        return -1;
    }          



    /* key generation for semaphore */
    sem_key = ftok(SEM_PATH, 1);  // key for semaphore
    if(sem_key == -1) {   // error semantics
        printf("generate key for semaphore failed\n");
        return -1;
    }

    /* key generation for reader-writer lock */
    shm_key_rwlock = ftok(RWLOCK_SHM_PATH, 1);  // key for reader-writer lock 
    if(shm_key_rwlock == -1) {  // error semantics
        printf("generation key for reader-writer lock failed\n");
        return -1;
    }



    /* key generation for image update checker */
    shm_key_imgupd = ftok(IMGUPD_SHM_PATH, 1); // key for image update checker
    if(shm_key_imgupd == -1) {  // error semantics
        printf("generation key for image update checker failed\n");
        return -1;
    }


    /****************************************************************/
    /* open shared memory */
    /****************************************************************/
    shrd_id_input = shmget(shm_key_input, IMAGE_SIZE, 0666);
    if(shrd_id_input < 0) {  // error semantics
        printf("Can't Access to the Shared memory for input...\n");
        return -1;
    }

    shrd_id_output = shmget(shm_key_output, IMAGE_SIZE, 0666);
    if(shrd_id_output < 0) {  // error semantics
        printf("Can't Access to the Shared memory for output...\n");
        return -1;
    }

    shrd_id_height = shmget(shm_key_height, sizeof(int), 0666);
    if(shrd_id_height < 0) {  // error semantics
        printf("Can't Access to the Shared memory for height...\n");
        return -1;
    }

    shrd_id_width = shmget(shm_key_width, sizeof(int), 0666);
    if(shrd_id_width < 0) {  // error semantics
        printf("Can't Access to the Shared memory for width...\n");
        return -1;
    }

    shrd_id_size = shmget(shm_key_size, sizeof(int), 0666);
    if(shrd_id_size < 0) {  // error semantics
        printf("Can't Access to the Shared memory for size...\n");
        return -1;
    }


    shrd_id_rbuf = shmget(shm_key_rbuf, MAX_OBJECT_NUM*sizeof(obj_coordinate), 0666);
    if(shrd_id_rbuf < 0) {
        printf("Can't Access to the Shared memory for rbuf...\n");
        return -1;
    }

    shrd_id_rbuf_head = shmget(shm_key_rbuf_head, sizeof(int), 0666);
    if(shrd_id_rbuf_head < 0) {
        printf("Can't Access to the Shared memory for rbuf_head...\n");
        return -1;
    }

    shrd_id_rbuf_tail = shmget(shm_key_rbuf_tail, sizeof(int), 0666);
    if(shrd_id_rbuf_tail < 0) {
        printf("Can't Access to the Shared memory for rbuf_tail...\n");
        return -1;
    }


    /* open semaphore */
    semid = semget(sem_key, 1, 0666);
    if(semid == -1) {
        printf("Can't Access to the semaphore\n");
        return -1;
    }

    /* open reader-writer lock */
    shrd_id_rwlock = shmget(shm_key_rwlock, sizeof(pthread_rwlock_t), 0666);
    if(shrd_id_rwlock < 0) {
        printf("Can't Access to the Shared memory for reader-writer lock...\n");
        return -1;
    }


    /* create shared image update checker */
    shrd_id_imgupd = shmget(shm_key_imgupd, sizeof(char)*256, 0666);
    if(shrd_id_imgupd < 0) {  // error semantics
        printf("Can't Access Shared memory for image update checker...\n");
        return -1;
    }


    /****************************************************************/
    /* get address of shared memory */
    /****************************************************************/
    shrd_ptr_input = (unsigned char*)shmat(shrd_id_input, NULL, 0);
    shrd_ptr_output = (unsigned char*)shmat(shrd_id_output, NULL, 0);

    shrd_ptr_height = (int*)shmat(shrd_id_height, NULL, 0);
    shrd_ptr_width = (int*)shmat(shrd_id_width, NULL, 0);
    shrd_ptr_size = (int*)shmat(shrd_id_size, NULL, 0);

    shrd_ptr_rbuf = (obj_coordinate *)shmat(shrd_id_rbuf, NULL, 0);
    shrd_ptr_rbuf_head = (int *)shmat(shrd_id_rbuf_head, NULL, 0);
    shrd_ptr_rbuf_tail = (int *)shmat(shrd_id_rbuf_tail, NULL, 0);

    shrd_ptr_rwlock = (pthread_rwlock_t *)shmat(shrd_id_rwlock, NULL, 0);

    shrd_ptr_imgupd = (char*)shmat(shrd_id_imgupd, NULL, 0);
    /*************************************************************************/
    // prepare for using shared memory and semaphoer
    /*************************************************************************/
    /*************************************************************************/

    /* initialize pointer */
    display_image = NULL;


//    while(1) {  //outer
        
//        break_flag = 0;

        //connect to android
        getConnect(12345, 0);

//#ifdef PRINT_INFO
        printf("connect0\n");
//#endif  /* ifdef PRINT_INFO */

        getConnect(12346, 1);

//#ifdef PRINT_INFO
        printf("connect1\n");
//#endif  /* ifdef PRINT_INFO */

        /*
          getConnect(12347, 2);
          printf("connect2\n");
          getConnect(12348, 3);
          printf("connect3\n");
          getConnect(12349, 4);
          printf("connect4\n");
          getConnect(12350, 5);
          printf("connect5\n");
        */
        //get infomation of whether or not server send image data to android
        if(getInfo() == -1)
            return 0;
        
        gettimeofday( &start_timeval, NULL );
        
        while(1) {  // inner
            gettimeofday(&start, NULL);
//            getSockInfo();
            if(getSockInfo() == -1){
                disconnect();
                return 0;
            }
            switch(dataInfo[0]){
            case 1:
                //printf("getPicture1\n");                                                         
                if(getPicture(1) == -1) {
                    return 0;
//                    break_flag = 1;
//                    break;
                }
//                if(flag == 1){
#ifdef PRINT_INFO
//                    printf("sendPicture1\n");
#endif  /* ifdef PRINT_INFO */
//                    sendPicture();
//                }
//                else if(flag == 2){
                else if(flag == 1 || flag == 2) {
                    
#ifdef PRINT_INFO
                    printf("send coordinates\n");
#endif  /* ifdef PRINT_INFO */

//                sleep(2);
//                if(sendCoordinates(points, 4, 2) == -1)
                    if(sendCoordinates(shrd_ptr_rbuf, VGA)== -1) {
                        return -1;
//                        break_flag = 1;
//                        break;
                    }
                }
                break;
            default:
                //printf("ERROR: dataInfo[0] is warong\n");
                //printf("dataInfo[0]: %d\n", dataInfo[0]);
                break;
                
            }
            gettimeofday(&end, NULL);
            cycle_time = (end.tv_sec - start.tv_sec)
                + (end.tv_usec - start.tv_usec) / 1000000.0;

#ifdef PRINT_INFO
            printf("cycle_time %f\n", cycle_time);
#endif  /* ifdef PRINT_INFO */

            count++;
            //printf("%d/100 Finish!!!\n",count);

//            if(break_flag != 0) {  // breakout inner loop
//                break;
//            }

        }   /* while(1) // inner */

        /* close(sock0); */
        /* close(sock1); */
        /* close(sock2); */
        /* close(sock3); */
        /* close(sock4); */
        /* close(sock5); */

//    } /* while(1) //outer */

    gettimeofday( &end_timeval, NULL );
    
    sec_timeofday = (end_timeval.tv_sec - start_timeval.tv_sec)
        + (end_timeval.tv_usec - start_timeval.tv_usec) / 1000000.0;
    
#ifdef PRINT_INFO
    printf("endtime: %f\n", sec_timeofday);
#endif  /* ifdef PRINT_INFO */

    return 0;

}
    
void getConnect(int port, int sock_num){
    struct sockaddr_in addr;
    struct sockaddr_in client;
    int len;
    int sock,tmp;
    int yes = 1;


    sock = socket(AF_INET, SOCK_STREAM, 0);

    addr.sin_family = AF_INET;
    addr.sin_port = htons(port); addr.sin_addr.s_addr = INADDR_ANY;
    //make it available immediately to connect
    setsockopt(sock,SOL_SOCKET, SO_REUSEADDR, (const char *)&yes, sizeof(yes));
    bind(sock, (struct sockaddr *)&addr, sizeof(addr));
    

//#ifdef PRINT_INFO
    printf("listening...\n");        
//#endif  /* ifdef PRINT_INFO */

    listen(sock, 5);


    len = sizeof(client);

//#ifdef PRINT_INFO
    printf("waiting accept\n");
//#endif  /* ifdef PRINT_INFO */


    tmp = accept(sock, (struct sockaddr *)&client, &len);
    if(tmp == -1){
        printf("ERROR: socket cannot accept\n");
        return ;
    }

    switch(sock_num){
    case 0:
        sock0 = tmp;
        break;
    case 1:
        sock1 = tmp;
        break;
    case 2:
        sock2 = tmp;
        break;
    case 3:
        sock3 = tmp;
        break;
    case 4:
        sock4 = tmp;
        break;
    case 5:
        sock5 = tmp;
        break;
    default:
        printf("ERROR: sock_num is wrong.\n");
        break;
    }

}

int getInfo(){
    if(recv(sock0, &flag, 4, 0) == -1){
        printf("ERROR: can not recieve info\n");
        return -1;
    }

    if(flag == 0){
        //printf("do not send image data to Android.\n");
    }
    else if(flag == 1){
        //printf("send image data to Android.\n");
    }
    else if(flag == 2){
	//printf("send image data to Android.\n");
    }
    else{
        printf("ERROR: flag is strange.\nflag = %d\n",flag);
        return -1;
    }	
}

int getSockInfo(){
    //get infomation that is number of sock and data size
#ifdef PRINT_INFO
    printf("getSockInfo\n");
#endif  /* ifdef PRINT_INFO */

    if(recv(sock0, &dataInfo, 12, 0) == -1){
        printf("ERROR: can not recieve Data info\n");
        return -1;
    }

#ifdef PRINT_INFO
    printf("dataIndo[0] = %d, dataInfo = %d, speed = %d\n", dataInfo[0], dataInfo[1], dataInfo[2]);
#endif  /* ifdef PRINT_INFO */

    return 0;
}


int getPicture(int sock_num){
    int sock;
    int len;
    int size = 0;
    unsigned int file_size = 555555;
    int sum = 0;
    int yes = 1;
    int image_size;
    static unsigned char size_str[20];
    
    //save image data
    char buf[400000];
    static unsigned char buf2[400000];

    struct timeval start, end;
    double transport_time;
	
    switch(sock_num){
    case 1:
        sock = sock1;
        break;
    case 2:
        sock = sock2;
        break;
    case 3:
        sock = sock3;
        break;
    case 4:
        sock = sock4;
        break;
    case 5:
        sock = sock5;
        break;
    }

    memset(buf, 0, sizeof(buf));
    
    image_size = dataInfo[1];

#ifdef PRINT_INFO
    printf("%d,",image_size);
#endif  /* ifdef PRINT_INFO */

    gettimeofday(&start, NULL);

    //printf("image_size:%d\n",image_size); 
    while(1){
	//recieve image data
        size = recv(sock, buf+sum, image_size-sum, 0);
        if(size == 0){
            printf("ERROR: cannot receive image data\n");
            return -1;
        }
        sum += size;
        //printf("size:%d__sum:%d\n",size,sum);
        if(sum == image_size){
            gettimeofday(&end, NULL);
            
            transport_time = (end.tv_sec - start.tv_sec)
                + (end.tv_usec - start.tv_usec) / 1000000.0;

#ifdef PRINT_INFO
            printf("%f,",transport_time);
#endif  /* ifdef PRINT_INFO */

            //printf("sum == file_size\n");                
            // save image dataa
            //strcpy(buf2, buf);

            photo(buf,image_size);
            return 0;
        }
        else if(sum > image_size){
            printf("ERROR: sum > file_size\n");
            return -1;
        }
    }
}

int photo(char *buf,int sum){
    FILE *fpw;
    char *fname_w = "photo/";
    int i, size;
	
    struct timeval tv;
    struct tm *tmptr = NULL;	

    int rtn;

    CvMat *tmpmat;

    //get current time
    gettimeofday(&tv, NULL);
    tmptr = localtime(&tv.tv_sec);
	
//    sprintf(file_name,"/home/gpu/workspace/geye/CAR_TRACKING/Test_Images/Daytime_Image_PNG/0.png");
    sprintf(file_name,"%s%02d:%02d:%02d:%3d.jpg",fname_w, tmptr->tm_hour, tmptr->tm_min, tmptr->tm_sec, tv.tv_usec/1000);

#if 0    
    //file open
    fpw = fopen( file_name, "wb" );

    if( fpw == NULL ){
        printf( "書込用 %sファイルが開けません\n", fname_w );
        return -1;
    }

   //write 
    fwrite( buf, sizeof( char ), sum, fpw );
    fclose( fpw );
#else


//    My_sem_operation(semid, LOCK); /* lock semaphore */
    rtn = pthread_rwlock_wrlock(shrd_ptr_rwlock); /* lock reader-writer lock as a writer */
    if(rtn != 0) {
        printf("pthread_rwlock_wrlock failed.\nerror no.%d\n", rtn);
    }

/***********************************************************************/
/***********************************************************************/
// here codes may be implemented as "dlSetImage"
/***********************************************************************/

    /* file open */
    fpw = fmemopen( shrd_ptr_input, sum, "wb" );

    /* if( fpw == NULL ){ */
    /*     printf( "書込用 %sファイルが開けません\n", fname_w ); */
    /*     return -1; */
    /* } */
   //write 
    fwrite( buf, sizeof( char ), sum, fpw );
    fclose( fpw );
    *shrd_ptr_size = sum;

  

/***********************************************************************/
/***********************************************************************/
    rtn = pthread_rwlock_unlock(shrd_ptr_rwlock); /* unlock reader-writer lock */
    if(rtn != 0) {
        printf("pthread_rwlock_unlock failed\n");
    }
//    My_sem_operation(semid, UNLOCK); /* unlock semaphore */






    /* write image update checker */
    My_sem_operation(semid, LOCK); /* lock semaphore */
    sprintf(shrd_ptr_imgupd,"%02d%02d%02d%3d", tmptr->tm_hour, tmptr->tm_min, tmptr->tm_sec, tv.tv_usec/1000);
    My_sem_operation(semid, UNLOCK); /* unlock semaphore */

#endif

#ifdef PRINT_INFO
    printf( "%sファイルのコピーが終わりました\n", file_name );
#endif  /* ifdef PRINT_INFO */


    /* 認識プログラムが2つなら400msで同期取れるが、3つになると500ms必要 */
//    usleep((useconds_t)500000);
//    usleep((useconds_t)400000);
    usleep((useconds_t)250000);  // for pedestrian detection only
//    usleep((useconds_t)300000);
    
    if (display_image != NULL)
    {
        /* if image is displayed, then delete it */        
        cvReleaseImage(&display_image);
    }

    /* save image data to display image */
    tmpmat = cvCreateMat(1, sum*sizeof(char), CV_8UC3);
    memcpy(tmpmat->data.ptr, buf, sum*sizeof(char));
    display_image = cvDecodeImage(tmpmat, CV_LOAD_IMAGE_COLOR);
    cvReleaseMat(&tmpmat);

}

// send image data to andrid
void sendPicture(){
    //TCP
    char buf[32];
    char size_str[20];
    int n,yes=1;

    FILE *fpr;
    unsigned char temp[50000];

    int size = 0, re = 0;

#if 0
    //File path
    //if you want to send the image data, you shoud set the this file path.
    if((fpr = fopen( file_name, "rb" )) == NULL ){
       printf("ERROR: can not open.\n");
       return;
    }

    //search size of image file 
    size = fread( temp, sizeof( unsigned char ), 150000, fpr);
    fclose(fpr);
#else
    My_sem_operation(semid, LOCK); /* lock semaphore */

    //File path
    //if you want to send the image data, you shoud set the this file path.
    if((fpr = fmemopen( shrd_ptr_output, *shrd_ptr_size, "rb" )) == NULL ){
       printf("ERROR: can not open.\n");
       return;
    }

    //search size of image file 
    size = fread( temp, sizeof( unsigned char ), 150000, fpr);
    fclose(fpr);

    My_sem_operation(semid, UNLOCK); /* unlock semaphore */
#endif

    sprintf(size_str,"%d",size);
    //send size of image file to android
    send(sock1, &size, 4, 0);
   //send image data to android
    re = send(sock1, temp, size, 0);
    if( re == -1 ){
        switch(errno){
        case EPIPE:
            break;
        }
    }

    //fflush buffer
    fflush(stdout);
//    fclose(fpr);
}

/*send coordinate of targeta
	sendCoordinates(struct coordinates *point, int num, int resolution) */
/*
 * ターゲットがいない場合は 
 *	x1 = -1;
 *	y1 = -1;
 *	に設定すること
 */
//int sendCoordinates(struct coordinates *points, int num, int resolution){
int sendCoordinates(obj_coordinate *points, int resolution) {
    int re = 0;
    int i = 0;	

    My_sem_operation(semid, LOCK); /* lock semaphore */
    int num = *shrd_ptr_rbuf_tail - *shrd_ptr_rbuf_head; /* the number of detected object */
#ifdef PRINT_INFO
    printf("tail %d, head %d \n", *shrd_ptr_rbuf_tail, *shrd_ptr_rbuf_head);
#endif  /* ifdef PRINT_INFO */

    //My_sem_operation(semid, UNLOCK); /* unlock semaphore */

    if(num==0) num++;
    if(num < 0) num += MAX_OBJECT_NUM;



   //data send to server
#if 0
    int data[4 + num*6];
#else
    int *data = (int *)malloc((4 + num*6)*sizeof(int)); 
    if(data == NULL) {
        printf("memory allocation error!!\n");
        printf("num %d\n", num);
        return -1;
    }

//    memset(data, 0, (4+num*6)*sizeof(int));           /* zero clear */
#endif
   
   /* header
      number of object
      resolution
      Reserverd
      Reserverd
   */
    data[0] = num;
    data[1] = resolution;
    data[2] = 0;
    data[3] = 0;

    while(i < num) {
#if 0
        data[4+i*4] = points->left;
        data[5+i*4] = points->top;
        data[6+i*4] = points->right;
        data[7+i*4] = points->bottom;
        printf("\n%d, %d, %d, %d\n", data[4+i], data[5+i],  data[6+i],  data[7+i]);
        i++;
        points++;
#else
        apGetCoordinate(shrd_ptr_rbuf, /* obj_coordinate *queue */
                        shrd_ptr_rbuf_head, /* int *head */
                        shrd_ptr_rbuf_tail, /* int *tail */
                        &data[4+i*6],       /* int *left */
                        &data[4+i*6+1],     /* int *upper */
                        &data[4+i*6+2],     /* int *right */
                        &data[4+i*6+3],     /* int *bottom */
                        &data[4+i*6+4]      /* int *type */
            );

        data[4+i*6+5] = 0;     /* reserved value(currently 0) */

#ifdef PRINT_INFO
          printf("\nleft: %d,top: %d,right: %d,bottom: %d,type: %d\n", data[4+i*6], data[5+i*6],  data[6+i*6],  data[7+i*6], data[8+i*6]);
#endif  /* ifdef PRINT_INFO */

        
        i++;
#endif
    }
    My_sem_operation(semid, UNLOCK); /* unlock semaphore */

//    printf("objects %d num %d\n", i, num);


//    if(send(sock1, &data, 16+24*num, 0) == -1){
//    if(send(sock1, data, 16+24*num, 0) == -1){
    if(send(sock1, data, (4+6*num)*sizeof(int), 0) == -1){
        printf("ERROR: can not send coordinate of target.\n");
        return -1;
    }



    /* draw detection result rectangles */
    i = 0;
    while(i < num) {
        CvScalar rects_color;
        CvPoint p1;
        CvPoint p2;

        switch(data[4+i*6+4]) { /* switched by object type */
        case CAR:
            rects_color = CV_RGB(0, 0, 255); /* blue */
            break;
        case SIGN:
            rects_color = CV_RGB(255, 255, 0); /* yellow */
            break;
        case PEDESTRIAN:
            rects_color = CV_RGB(0, 255, 0); /* green */
            break;
        default:
            rects_color = CV_RGB(0, 0, 0); /* black */
            break;   
        }
        
        p1 = cvPoint(data[4+i*6], data[4+i*6+1]); /* p1(left, upper) */
        p2 = cvPoint(data[4+i*6+2], data[4+i*6+3]); /* p2(right, bottom) */
        
        cvRectangle(display_image, p1, p2, rects_color, 5, 8, 0);

        i++;
        
    }

    /* display detect results */
    cvShowImage("detection result", display_image);
    cvWaitKey(1);



    free(data);

    return 0;	
}
